---
- name: Install dependencies
  package:
    name:
    - alsa-utils
    - autoconf
    - automake
    - '{{ "avahi" if ansible_os_family == "Archlinux" else "avahi-daemon" }}'
    - '{{ "base-devel" if ansible_os_family == "Archlinux" else "build-essential" }}'
    - ca-certificates
    - git
    - libtool
    - '{{ "util-linux-libs" if ansible_os_family == "Archlinux" else "uuid-dev" }}'
    - xxd
    - '{{ "pipewire-pulse" if ansible_os_family == "Archlinux" else "libpulse-dev" }}'
    - '{{ "alsa-lib" if ansible_os_family == "Archlinux" else "libasound2-dev" }}'
    - '{{ "avahi" if ansible_os_family == "Archlinux" else "libavahi-client-dev" }}'
    - '{{ "ffmpeg4.4" if ansible_os_family == "Archlinux" else "libavcodec-dev" }}'
    - '{{ "ffmpeg4.4" if ansible_os_family == "Archlinux" else "libavformat-dev" }}'
    - '{{ "ffmpeg4.4" if ansible_os_family == "Archlinux" else "libavutil-dev" }}'
    - '{{ "libconfig" if ansible_os_family == "Archlinux" else "libconfig-dev" }}'
    - '{{ "libgcrypt" if ansible_os_family == "Archlinux" else "libgcrypt-dev" }}'
    - '{{ "mosquitto" if ansible_os_family == "Archlinux" else "libmosquitto-dev" }}'
    - '{{ "libplist" if ansible_os_family == "Archlinux" else "libplist-dev" }}'
    - '{{ "popt" if ansible_os_family == "Archlinux" else "libpopt-dev" }}'
    - '{{ "libsndfile" if ansible_os_family == "Archlinux" else "libsndfile1-dev" }}'
    - '{{ "libsodium" if ansible_os_family == "Archlinux" else "libsodium-dev" }}'
    - '{{ "libsoxr" if ansible_os_family == "Archlinux" else "libsoxr-dev" }}'
    - '{{ "openssl" if ansible_os_family == "Archlinux" else "libssl-dev" }}'
  become: yes
- name: Check if nqptp is up-to-date
  shell: nqptp -V 2>/dev/null | grep -o "g$(git ls-remote "{{ nqptp_repo }}" "refs/heads/{{ nqptp_branch }}" | cut -c -7)"
  register: nqptp_up_to_date
  ignore_errors: true
  failed_when: nqptp_up_to_date.stdout | length != 8
  changed_when: nqptp_up_to_date.rc != 0
- name: Check if shairport-sync is up-to-date
  shell: shairport-sync -V 2>/dev/null | grep -o "g$(git ls-remote "{{ shairport_sync_repo }}" "refs/heads/{{ shairport_sync_branch }}" | cut -c -7)"
  register: shairport_sync_up_to_date
  ignore_errors: true
  failed_when: shairport_sync_up_to_date.stdout | length != 8
  changed_when: shairport_sync_up_to_date.rc != 0
- name: Create build directory
  tempfile:
    state: directory
  register: build_dir
  when: nqptp_up_to_date.changed or shairport_sync_up_to_date.changed
- name: Clone nqptp repo
  git:
    repo: '{{ nqptp_repo }}'
    dest: '{{ build_dir.path }}/nqptp'
    single_branch: yes
    version: '{{ nqptp_branch }}'
  when: nqptp_up_to_date.changed
- name: Build nqptp
  shell:
    cmd: |
      autoreconf -fi
      ./configure \
        --prefix=/usr \
        --with-systemd-startup
      make -j

      # Remove previous version.
      rm -f /usr/bin/nqptp
      rm -f /usr/lib/systemd/system/nqptp.service

      make install
    chdir: '{{ build_dir.path }}/nqptp'
  when: nqptp_up_to_date.changed
  become: yes
- name: Enable nqptp service
  service:
    name: nqptp
    enabled: true
    state: started
  become: yes
- name: Clone alac repo
  git:
    repo: '{{ alac_repo }}'
    dest: '{{ build_dir.path }}/alac'
    single_branch: yes
    version: '{{ alac_branch }}'
  when: shairport_sync_up_to_date.changed
- name: Build libalac
  shell:
    cmd: |
      autoreconf -fi
      ./configure \
        --prefix=/usr
      make -j
      make install
      ldconfig
    chdir: '{{ build_dir.path }}/alac'
  when: shairport_sync_up_to_date.changed
  become: yes
- name: Clone shairport-sync repo
  git:
    repo: '{{ shairport_sync_repo }}'
    dest: '{{ build_dir.path }}/shairport-sync'
    single_branch: yes
    version: '{{ shairport_sync_branch }}'
  when: shairport_sync_up_to_date.changed
- name: Build shairport-sync
  shell:
    cmd: |
      if {{ ansible_os_family == "Archlinux" }}; then
        export PKG_CONFIG_PATH="/usr/lib/ffmpeg4.4/pkgconfig/:$PKG_CONFIG_PATH"
      fi

      autoreconf -fi
      ./configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --with-alsa \
        --with-airplay-2 \
        --with-apple-alac \
        --with-avahi \
        --with-convolution \
        --with-pkg-config \
        --with-ssl=openssl \
        --with-metadata \
        --with-pa \
        --with-soxr \
        --with-systemd \
        --with-mqtt-client
      make -j

      # Remove previous version.
      rm -f /usr/bin/shairport-sync
      rm -f /usr/lib/systemd/system/shairport-sync.service

      make install
    chdir: '{{ build_dir.path }}/shairport-sync'
  when: shairport_sync_up_to_date.changed
  become: yes
- name: Delete build directory
  file:
    path: '{{ build_dir.path }}'
    state: absent
  when: build_dir.path is defined
  become: yes
- name: Generate user service
  copy:
    src: /usr/lib/systemd/system/shairport-sync.service
    remote_src: true
    dest: /usr/lib/systemd/user/shairport-sync.service
  become: yes
  when: shairport_user_service
  changed_when: false
- name: Adjust user service
  lineinfile:
    dest: /usr/lib/systemd/user/shairport-sync.service
    state: '{{ item.state }}'
    regex: '^{{ item.regex }}'
    line: '{{ item.line if item.line is defined }}'
  loop:
    - regex: Requires=avahi-daemon.service
      state: absent
    - regex: After=avahi-daemon.service
      state: absent
    - regex: User=
      state: absent
    - regex: Group=
      state: absent
    - regex: WantedBy=
      line: WantedBy=default.target
      state: present
  become: yes
  when: shairport_user_service
  changed_when: false
- name: Enable avahi-daemon
  service:
    name: avahi-daemon
    enabled: yes
    state: started
  become: yes
- name: Configure shairport-sync
  template:
    src: shairport-sync.conf.j2
    dest: /etc/shairport-sync.conf
  register: config
  become: yes
- name: Start or restart shairport-sync
  systemd:
    name: shairport-sync
    enabled: true
    state: '{{ "restarted" if (shairport_sync_up_to_date.changed or config.changed) else "started" }}'
    scope: '{{ "user" if shairport_user_service else "system" }}'
  become: '{{ not shairport_user_service }}'
